name: Framework Version Check

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

jobs:
  version-compatibility:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install core dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest pytest-asyncio
    
    - name: Test core imports (always should work)
      run: |
        python -c "
        # Test core imports
        from contexa_sdk.core.agent import ContexaAgent, AgentMemory
        from contexa_sdk.core.model import ContexaModel, ModelResponse, ModelMessage
        from contexa_sdk.core.tool import ContexaTool, BaseTool
        print('✓ Core imports successful')
        "
    
    - name: Test LangChain compatibility (with current versions)
      run: |
        pip install 'langchain>=0.3.26' 'langchain-core>=0.3.67' 'langchain-community>=0.3.0' || echo "LangChain installation failed"
        python -c "
        try:
            import langchain
            print(f'✓ LangChain {langchain.__version__} compatible')
        except ImportError as e:
            print(f'⚠ LangChain not available: {e}')
        except Exception as e:
            print(f'⚠ LangChain compatibility issue: {e}')
        " || true
    
    - name: Test OpenAI compatibility (with current versions)
      run: |
        pip install 'openai>=1.93.0' 'openai-agents>=0.1.0' || echo "OpenAI packages installation failed"
        python -c "
        try:
            import openai
            print(f'✓ OpenAI {openai.__version__} compatible')
        except ImportError as e:
            print(f'⚠ OpenAI not available: {e}')
        except Exception as e:
            print(f'⚠ OpenAI compatibility issue: {e}')
        
        try:
            import agents
            print(f'✓ OpenAI Agents SDK compatible')
            # Test basic agent creation
            from agents import Agent
            print('✓ OpenAI Agents SDK Agent class available')
        except ImportError as e:
            print(f'⚠ OpenAI Agents SDK not available: {e}')
        except Exception as e:
            print(f'⚠ OpenAI Agents SDK compatibility issue: {e}')
        " || true
    
    - name: Test Google GenAI compatibility (with current versions)
      run: |
        pip install 'google-genai>=1.23.0' || echo "Google GenAI installation failed"
        python -c "
        try:
            from google import genai
            from google.genai import types
            print('✓ Google GenAI compatible')
        except ImportError as e:
            print(f'⚠ Google GenAI not available: {e}')
        except Exception as e:
            print(f'⚠ Google GenAI compatibility issue: {e}')
        " || true
    
    - name: Test CrewAI compatibility (with current versions)
      run: |
        pip install 'crewai>=0.119.0' 'crewai-tools>=0.48.0' || echo "CrewAI installation failed"
        python -c "
        try:
            import crewai
            from crewai import Agent, Task, Crew
            print('✓ CrewAI compatible')
        except ImportError as e:
            print(f'⚠ CrewAI not available: {e}')
        except Exception as e:
            print(f'⚠ CrewAI compatibility issue: {e}')
        " || true
    
    - name: Run core tests
      run: |
        python -m pytest tests/core/ -v --tb=short || echo "Some core tests failed - this is expected during development"

  core-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10']  # Focus on single Python version for now

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest pytest-asyncio
    
    - name: Test core imports
      run: |
        python -c "
        # Test core imports
        from contexa_sdk.core.agent import ContexaAgent, AgentMemory
        from contexa_sdk.core.model import ContexaModel, ModelMessage, ModelResponse
        from contexa_sdk.core.tool import ContexaTool
        from contexa_sdk.core.prompt import ContexaPrompt
        print('✓ All core imports successful')
        "
    
    - name: Run core tests
      run: |
        pytest tests/core/ -v --tb=short
    
    - name: Test MCP components
      run: |
        python -c "
        # Test MCP imports
        from contexa_sdk.mcp.server.server import MCPServer
        from contexa_sdk.mcp.client.client import MCPClient
        from contexa_sdk.mcp.protocol.protocol import MCPProtocol
        print('✓ MCP components import successfully')
        "
        pytest tests/mcp/ -v --tb=short

  basic-functionality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
    
    - name: Test basic agent creation
      run: |
        python -c "
        from contexa_sdk.core.agent import ContexaAgent, AgentMemory
        from contexa_sdk.core.model import ContexaModel
        from contexa_sdk.core.tool import ContexaTool
        from pydantic import BaseModel
        
        # Test tool creation
        class TestInput(BaseModel):
            query: str
        
        @ContexaTool.register(name='test_tool', description='Test tool')
        async def test_tool(inp: TestInput) -> str:
            return f'Result: {inp.query}'
        
        # Test agent creation
        agent = ContexaAgent(
            name='Test Agent',
            description='Test agent',
            model=ContexaModel('test-model', provider='mock'),
            tools=[test_tool.__contexa_tool__],
            memory=AgentMemory()
        )
        
        print('✓ Basic functionality test passed')
        print(f'Agent: {agent.name}')
        print(f'Tools: {len(agent.tools)}')
        "

  optional-framework-tests:
    runs-on: ubuntu-latest
    continue-on-error: true  # Don't fail the entire workflow if optional tests fail
    strategy:
      matrix:
        framework: ['langchain', 'openai', 'google-genai']
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'
    
    - name: Install framework dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        
        case "${{ matrix.framework }}" in
          langchain)
            pip install "langchain>=0.1.0" || echo "LangChain installation failed"
            ;;
          openai)
            pip install "openai>=1.0.0" "openai-agents>=0.1.0" || echo "OpenAI packages installation failed"
            ;;
          google-genai)
            pip install "google-generativeai>=0.3.0" || echo "Google GenAI installation failed"
            ;;
        esac
    
    - name: Test framework import
      run: |
        python -c "
        import sys
        framework = '${{ matrix.framework }}'
        
        try:
            if framework == 'langchain':
                from contexa_sdk.adapters import langchain
                print(f'✓ {framework} adapter imported successfully')
            elif framework == 'openai':
                from contexa_sdk.adapters import openai
                print(f'✓ {framework} adapter imported successfully')
            elif framework == 'google-genai':
                from contexa_sdk.adapters.google import genai_tool, genai_model
                print(f'✓ {framework} adapter imported successfully')
        except ImportError as e:
            print(f'- {framework} adapter not available: {e}')
            # Don't exit with error for optional frameworks
        except Exception as e:
            print(f'! {framework} adapter error: {e}')
        "

  adapter-compatibility:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        framework: ['langchain', 'crewai', 'openai', 'google-genai', 'google-adk']

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'
    
    - name: Install base dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest pytest-asyncio
    
    - name: Install framework-specific dependencies
      run: |
        case "${{ matrix.framework }}" in
          langchain)
            pip install -e .[langchain]
            ;;
          crewai)
            pip install -e .[crewai]
            ;;
          openai)
            pip install -e .[openai]
            ;;
          google-genai)
            pip install -e .[google-genai]
            ;;
          google-adk)
            pip install -e .[google-adk]
            ;;
        esac
    
    - name: Test adapter compatibility
      run: |
        python -c "
        import sys
        framework = '${{ matrix.framework }}'
        
        try:
            if framework == 'langchain':
                from contexa_sdk.adapters import langchain
                print(f'✓ {framework} adapter imported successfully')
            elif framework == 'crewai':
                from contexa_sdk.adapters import crewai
                print(f'✓ {framework} adapter imported successfully')
            elif framework == 'openai':
                from contexa_sdk.adapters import openai
                print(f'✓ {framework} adapter imported successfully')
            elif framework == 'google-genai':
                from contexa_sdk.adapters.google import genai_tool, genai_model, genai_agent
                print(f'✓ {framework} adapter imported successfully')
            elif framework == 'google-adk':
                from contexa_sdk.adapters.google import adk_tool, adk_model, adk_agent
                print(f'✓ {framework} adapter imported successfully')
        except ImportError as e:
            print(f'✗ {framework} adapter import failed: {e}')
            sys.exit(1)
        except Exception as e:
            print(f'✗ {framework} adapter error: {e}')
            sys.exit(1)
        "
    
    - name: Run adapter-specific tests
      run: |
        case "${{ matrix.framework }}" in
          langchain)
            pytest tests/adapters/test_langchain.py -v
            ;;
          crewai)
            pytest tests/adapters/test_crewai.py -v
            ;;
          openai)
            pytest tests/adapters/test_openai.py -v
            ;;
          google-genai)
            pytest tests/adapters/test_google_genai.py -v
            ;;
          google-adk)
            pytest tests/adapters/test_google_adk.py -v
            ;;
        esac

  cross-framework-compatibility:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'
    
    - name: Install all framework dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[all]
        pip install pytest pytest-asyncio
    
    - name: Test cross-framework handoffs
      run: |
        pytest tests/integration/test_cross_framework_handoffs.py -v
    
    - name: Test Google adapter interoperability
      run: |
        pytest tests/integration/test_google_adapters_compatibility.py -v
        pytest tests/integration/test_google_adapters_workflow.py -v

  documentation-verification:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[all]
        pip install pydocstyle
    
    - name: Check docstring compliance
      run: |
        pydocstyle contexa_sdk --convention=google --add-ignore=D100,D104
    
    - name: Verify documentation completeness
      run: |
        python -c "
        import os
        import ast
        import sys
        
        def check_docstrings(directory):
            missing_docstrings = []
            for root, dirs, files in os.walk(directory):
                for file in files:
                    if file.endswith('.py') and not file.startswith('__'):
                        filepath = os.path.join(root, file)
                        try:
                            with open(filepath, 'r') as f:
                                tree = ast.parse(f.read())
                            
                            for node in ast.walk(tree):
                                if isinstance(node, (ast.FunctionDef, ast.ClassDef)):
                                    if not ast.get_docstring(node):
                                        missing_docstrings.append(f'{filepath}:{node.lineno} - {node.name}')
                        except Exception as e:
                            print(f'Error parsing {filepath}: {e}')
            
            return missing_docstrings
        
        missing = check_docstrings('contexa_sdk')
        if missing:
            print('Missing docstrings found:')
            for item in missing[:10]:  # Show first 10
                print(f'  {item}')
            if len(missing) > 10:
                print(f'  ... and {len(missing) - 10} more')
            sys.exit(1)
        else:
            print('✓ All public functions and classes have docstrings')
        "

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
        pip install -e .[all]
    
    - name: Run safety check
      run: |
        safety check
    
    - name: Run bandit security scan
      run: |
        bandit -r contexa_sdk -f json -o bandit-report.json || true
        bandit -r contexa_sdk
 