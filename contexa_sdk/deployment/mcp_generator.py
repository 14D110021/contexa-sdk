"""Code generator for MCP-compatible agent servers."""

import os
from typing import Dict, List, Any, Optional

from contexa_sdk.core.agent import ContexaAgent


def generate_mcp_app_py(
    agent_config: Dict[str, Any], 
    tools_config: Dict[str, Any],
    mcp_version: str = "1.0"
) -> str:
    """Generate the app.py file for an MCP-compatible agent server.
    
    Args:
        agent_config: Configuration for the agent
        tools_config: Configuration for the agent's tools
        mcp_version: MCP version to use
        
    Returns:
        The contents of the app.py file
    """
    template = '''"""MCP-compatible agent server generated by Contexa SDK."""

import os
import json
import asyncio
from typing import Dict, List, Any, Optional, Union
from pydantic import BaseModel, Field

import uvicorn
from fastapi import FastAPI, HTTPException, Request, Depends, Body
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from fastapi.openapi.utils import get_openapi

from contexa_sdk.core.agent import ContexaAgent
from contexa_sdk.core.tool import RemoteTool
from contexa_sdk.core.memory import ContexaMemory
from contexa_sdk.core.config import ContexaConfig


# Define the agent configuration
AGENT_CONFIG = {json_agent_config}

# Define the tools configuration
TOOLS_CONFIG = {json_tools_config}

# Initialize the agent
agent = None


class QueryInput(BaseModel):
    """Input model for agent queries."""
    query: str = Field(..., description="The query to run against the agent")
    context: Optional[Dict[str, Any]] = Field(None, description="Additional context for the query")
    handoff_data: Optional[Dict[str, Any]] = Field(None, description="Handoff data from another agent")
    conversation_id: Optional[str] = Field(None, description="Conversation ID to continue")


class MCPMetadata(BaseModel):
    """Metadata for MCP compatibility."""
    version: str = Field("{mcp_version}", description="MCP version")
    agent_name: str = Field(..., description="Name of the agent")
    agent_description: str = Field(..., description="Description of the agent")
    agent_type: str = Field("contexa", description="Type of agent")
    capabilities: List[str] = Field(default_factory=list, description="Capabilities of this agent")


app = FastAPI(
    title=f"Contexa MCP Agent: {{agent_name}}",
    description=f"MCP-compatible agent server for {{agent_description}}",
    version="{mcp_version}",
)

# Add CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


async def get_agent() -> ContexaAgent:
    """Get the initialized agent or initialize it if it doesn't exist."""
    global agent
    if agent is None:
        # Load tools from configuration
        tools = []
        for tool_config in TOOLS_CONFIG:
            if tool_config.get("type") == "remote":
                tools.append(RemoteTool.from_dict(tool_config))
            else:
                # Implement loading of other tool types as needed
                pass
                
        # Create agent configuration
        config = ContexaConfig()
        
        # Initialize the agent
        agent = ContexaAgent(
            name=AGENT_CONFIG.get("name", "MCP Agent"),
            description=AGENT_CONFIG.get("description", ""),
            tools=tools,
            config=config,
            agent_id=AGENT_CONFIG.get("agent_id"),
        )
        
        # Initialize any additional agent properties
        if "memory" in AGENT_CONFIG:
            agent.memory = ContexaMemory.from_dict(AGENT_CONFIG["memory"])
            
    return agent


@app.get("/")
async def root():
    """Root endpoint."""
    return {
        "status": "ok",
        "message": "MCP-compatible agent server is running",
        "agent_name": AGENT_CONFIG.get("name", "MCP Agent"),
    }


@app.get("/mcp/metadata")
async def get_metadata():
    """Get MCP metadata."""
    return MCPMetadata(
        agent_name=AGENT_CONFIG.get("name", "MCP Agent"),
        agent_description=AGENT_CONFIG.get("description", ""),
        capabilities=[t.get("name", "") for t in TOOLS_CONFIG],
    ).dict()


@app.post("/mcp/run")
async def run_agent(
    input_data: QueryInput,
    agent: ContexaAgent = Depends(get_agent),
):
    """Run the agent."""
    try:
        # Extract the conversation ID if provided
        conversation_id = input_data.conversation_id
        if conversation_id and agent.memory:
            await agent.memory.load_conversation(conversation_id)
        
        # Extract handoff data if provided
        if input_data.handoff_data:
            # Process the handoff data
            if agent.memory:
                # Add handoff messages to the memory
                if "messages" in input_data.handoff_data:
                    for msg in input_data.handoff_data["messages"]:
                        agent.memory.add_message(msg)
                        
                # Add any other handoff data that's relevant
                if "metadata" in input_data.handoff_data:
                    agent.memory.metadata.update(input_data.handoff_data["metadata"])
        
        # Build the query context
        context = input_data.context or {{}}
        
        # Run the agent
        response = await agent.run(input_data.query, context=context)
        
        # Return the result
        return {{
            "result": response,
            "agent_id": agent.agent_id,
            "conversation_id": agent.memory.conversation_id if agent.memory else None,
        }}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/mcp/handoff")
async def receive_handoff(
    input_data: QueryInput,
    agent: ContexaAgent = Depends(get_agent),
):
    """Receive a handoff from another agent."""
    try:
        # This endpoint is similar to run but is specifically for handoffs
        # This allows us to add special handling for handoffs if needed
        
        # Extract the handoff data
        handoff_data = input_data.handoff_data or {{}}
        
        # Handle the handoff
        if agent.memory:
            # Add handoff messages to the memory
            if "messages" in handoff_data:
                for msg in handoff_data["messages"]:
                    agent.memory.add_message(msg)
                    
            # Add any other handoff data that's relevant
            if "metadata" in handoff_data:
                agent.memory.metadata.update(handoff_data["metadata"])
        
        # Build the query context
        context = input_data.context or {{}}
        
        # Run the agent with the query
        response = await agent.run(input_data.query, context=context)
        
        # Return the result
        return {{
            "result": response,
            "agent_id": agent.agent_id,
            "conversation_id": agent.memory.conversation_id if agent.memory else None,
        }}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/mcp/tools")
async def get_tools():
    """Get the list of tools available to the agent."""
    tools_list = []
    for tool_config in TOOLS_CONFIG:
        tools_list.append({{
            "name": tool_config.get("name", ""),
            "description": tool_config.get("description", ""),
            "parameters": tool_config.get("parameters", {{}}),
        }})
    return tools_list


@app.get("/openapi.json", include_in_schema=False)
async def get_openapi_schema():
    """Get custom OpenAPI schema with MCP extensions."""
    openapi_schema = get_openapi(
        title=app.title,
        version=app.version,
        description=app.description,
        routes=app.routes,
    )
    
    # Add MCP-specific metadata
    openapi_schema["info"]["x-mcp-version"] = "{mcp_version}"
    openapi_schema["info"]["x-mcp-agent-type"] = "contexa"
    openapi_schema["info"]["x-mcp-capabilities"] = [t.get("name", "") for t in TOOLS_CONFIG]
    
    return openapi_schema


if __name__ == "__main__":
    # Run the server
    uvicorn.run(
        "app:app",
        host="0.0.0.0",
        port=int(os.environ.get("PORT", 8000)),
        log_level="info",
    )
'''

    # Prepare the agent and tools configuration
    json_agent_config = json.dumps(agent_config, indent=2)
    json_tools_config = json.dumps(tools_config, indent=2)
    
    # Format the template with the agent and tools configuration
    formatted_template = template.format(
        json_agent_config=json_agent_config,
        json_tools_config=json_tools_config,
        mcp_version=mcp_version,
        agent_name=agent_config.get("name", "MCP Agent"),
        agent_description=agent_config.get("description", ""),
    )
    
    return formatted_template


def generate_mcp_requirements_txt(mcp_version: str = "1.0") -> str:
    """Generate the requirements.txt file for an MCP-compatible agent server.
    
    Args:
        mcp_version: MCP version to use
        
    Returns:
        The contents of the requirements.txt file
    """
    return """
# Contexa SDK
contexa-sdk>=0.1.0

# FastAPI for MCP server
fastapi>=0.95.0
uvicorn>=0.21.0
pydantic>=1.10.7

# HTTP client for remote tools
httpx>=0.24.0

# Additional dependencies
python-multipart>=0.0.6
"""


def generate_mcp_dockerfile() -> str:
    """Generate the Dockerfile for an MCP-compatible agent server.
    
    Returns:
        The contents of the Dockerfile
    """
    return """FROM python:3.10-slim

WORKDIR /app

# Copy requirements and install dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy the application code
COPY . .

# Expose the port
EXPOSE 8000

# Run the application
CMD ["uvicorn", "app:app", "--host", "0.0.0.0", "--port", "8000"]
"""


def generate_mcp_openapi_spec(
    agent_config: Dict[str, Any],
    tools_config: List[Dict[str, Any]],
    mcp_version: str = "1.0"
) -> Dict[str, Any]:
    """Generate an OpenAPI spec for an MCP-compatible agent server.
    
    Args:
        agent_config: Configuration for the agent
        tools_config: Configuration for the agent's tools
        mcp_version: MCP version to use
        
    Returns:
        The OpenAPI specification as a dictionary
    """
    # Extract agent name and description
    agent_name = agent_config.get("name", "MCP Agent")
    agent_description = agent_config.get("description", "")
    
    # Build tool schemas for the OpenAPI spec
    tool_schemas = {}
    tool_paths = {}
    
    for tool in tools_config:
        tool_name = tool.get("name", "")
        if not tool_name:
            continue
            
        # Create a schema for the tool parameters
        parameters = tool.get("parameters", {})
        properties = {}
        required = []
        
        for param_name, param_info in parameters.items():
            param_type = param_info.get("type", "string")
            properties[param_name] = {
                "type": param_type,
                "description": param_info.get("description", ""),
            }
            
            if param_info.get("required", False):
                required.append(param_name)
                
        # Add the schema for this tool
        schema_name = f"{tool_name}Parameters"
        tool_schemas[schema_name] = {
            "type": "object",
            "properties": properties,
            "required": required,
        }
        
        # Add the path for this tool
        tool_paths[f"/tools/{tool_name}"] = {
            "post": {
                "summary": f"Execute the {tool_name} tool",
                "description": tool.get("description", ""),
                "operationId": f"execute{tool_name.capitalize()}",
                "requestBody": {
                    "required": True,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": f"#/components/schemas/{schema_name}"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful execution",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "result": {
                                            "type": "object",
                                            "description": "Tool execution result"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid parameters"
                    },
                    "500": {
                        "description": "Tool execution error"
                    }
                }
            }
        }
    
    # Build the complete OpenAPI spec
    openapi_spec = {
        "openapi": "3.0.0",
        "info": {
            "title": f"Contexa MCP Agent: {agent_name}",
            "description": agent_description,
            "version": "1.0.0",
            "x-mcp-version": mcp_version,
            "x-mcp-agent-type": "contexa",
            "x-mcp-capabilities": [t.get("name", "") for t in tools_config],
        },
        "servers": [
            {
                "url": "/",
                "description": "MCP agent server"
            }
        ],
        "paths": {
            "/mcp/run": {
                "post": {
                    "summary": "Run the agent",
                    "description": "Send a query to the agent and get a response",
                    "operationId": "runAgent",
                    "requestBody": {
                        "required": True,
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/QueryInput"
                                }
                            }
                        }
                    },
                    "responses": {
                        "200": {
                            "description": "Successful response",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "properties": {
                                            "result": {
                                                "type": "string",
                                                "description": "Agent response"
                                            },
                                            "agent_id": {
                                                "type": "string",
                                                "description": "Agent ID"
                                            },
                                            "conversation_id": {
                                                "type": "string",
                                                "description": "Conversation ID"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Agent execution error"
                        }
                    }
                }
            },
            "/mcp/handoff": {
                "post": {
                    "summary": "Receive a handoff from another agent",
                    "description": "Receive a query and handoff data from another agent",
                    "operationId": "receiveHandoff",
                    "requestBody": {
                        "required": True,
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/QueryInput"
                                }
                            }
                        }
                    },
                    "responses": {
                        "200": {
                            "description": "Successful response",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "properties": {
                                            "result": {
                                                "type": "string",
                                                "description": "Agent response"
                                            },
                                            "agent_id": {
                                                "type": "string",
                                                "description": "Agent ID"
                                            },
                                            "conversation_id": {
                                                "type": "string",
                                                "description": "Conversation ID"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "500": {
                            "description": "Agent execution error"
                        }
                    }
                }
            },
            "/mcp/tools": {
                "post": {
                    "summary": "Get the tools available to the agent",
                    "description": "List all tools with their parameters",
                    "operationId": "getTools",
                    "responses": {
                        "200": {
                            "description": "List of tools",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "array",
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "name": {
                                                    "type": "string",
                                                    "description": "Tool name"
                                                },
                                                "description": {
                                                    "type": "string",
                                                    "description": "Tool description"
                                                },
                                                "parameters": {
                                                    "type": "object",
                                                    "description": "Tool parameters"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "/mcp/metadata": {
                "get": {
                    "summary": "Get MCP metadata",
                    "description": "Get metadata about the MCP agent",
                    "operationId": "getMetadata",
                    "responses": {
                        "200": {
                            "description": "MCP metadata",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/MCPMetadata"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "components": {
            "schemas": {
                "QueryInput": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "The query to run against the agent"
                        },
                        "context": {
                            "type": "object",
                            "description": "Additional context for the query"
                        },
                        "handoff_data": {
                            "type": "object",
                            "description": "Handoff data from another agent"
                        },
                        "conversation_id": {
                            "type": "string",
                            "description": "Conversation ID to continue"
                        }
                    },
                    "required": ["query"]
                },
                "MCPMetadata": {
                    "type": "object",
                    "properties": {
                        "version": {
                            "type": "string",
                            "description": "MCP version"
                        },
                        "agent_name": {
                            "type": "string",
                            "description": "Name of the agent"
                        },
                        "agent_description": {
                            "type": "string",
                            "description": "Description of the agent"
                        },
                        "agent_type": {
                            "type": "string",
                            "description": "Type of agent"
                        },
                        "capabilities": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Capabilities of this agent"
                        }
                    },
                    "required": ["version", "agent_name", "agent_description", "agent_type"]
                },
                **tool_schemas
            }
        }
    }
    
    # Add the tool paths
    openapi_spec["paths"].update(tool_paths)
    
    return openapi_spec 