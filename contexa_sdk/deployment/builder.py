"""Builder module for building and packaging Contexa agents."""

import os
import json
import shutil
import tarfile
import tempfile
from typing import Dict, List, Any, Optional, Union

from contexa_sdk.core.agent import ContexaAgent
from contexa_sdk.core.tool import BaseTool
from contexa_sdk.core.config import ContexaConfig
from contexa_sdk.deployment.mcp_generator import (
    generate_mcp_app_py,
    generate_mcp_requirements_txt,
    generate_mcp_dockerfile,
    generate_mcp_openapi_spec,
)


def build_agent(
    agent: ContexaAgent,
    output_dir: str = "./build",
    version: str = "0.1.0",
    include_tools: bool = True,
    include_memory: bool = True,
    mcp_compatible: bool = False,
    mcp_version: str = "1.0",
) -> str:
    """Build and package a Contexa agent.
    
    Args:
        agent: The agent to build
        output_dir: Directory to output the built agent
        version: Version of the agent
        include_tools: Whether to include tools in the build
        include_memory: Whether to include memory in the build
        mcp_compatible: Whether to build an MCP-compatible agent server
        mcp_version: Version of MCP to use
        
    Returns:
        Path to the built agent artifact
    """
    # Create the output directory if it doesn't exist
    os.makedirs(output_dir, exist_ok=True)
    
    # Convert the agent to a dictionary
    agent_dict = agent.to_dict()
    
    # Add version information
    agent_dict["version"] = version
    
    # Create tool configurations
    tools_config = []
    if include_tools and agent.tools:
        for tool in agent.tools:
            tools_config.append(tool.to_dict())
    
    # If MCP compatible, build an MCP agent server
    if mcp_compatible:
        return build_mcp_agent_server(
            agent_dict=agent_dict,
            tools_config=tools_config,
            output_dir=output_dir,
            version=version,
            mcp_version=mcp_version,
        )
    
    # Build a regular agent package
    return _build_regular_agent_package(
        agent_dict=agent_dict,
        tools_config=tools_config,
        output_dir=output_dir,
        version=version,
        include_memory=include_memory,
    )


def build_mcp_agent_server(
    agent_dict: Dict[str, Any],
    tools_config: List[Dict[str, Any]],
    output_dir: str = "./build",
    version: str = "0.1.0",
    mcp_version: str = "1.0",
) -> str:
    """Build an MCP-compatible agent server.
    
    Args:
        agent_dict: Dictionary representation of the agent
        tools_config: List of tool configurations
        output_dir: Directory to output the built agent
        version: Version of the agent
        mcp_version: Version of MCP to use
        
    Returns:
        Path to the built agent artifact
    """
    # Create a temporary directory for the build
    with tempfile.TemporaryDirectory() as temp_dir:
        # Write the agent configuration to the temporary directory
        with open(os.path.join(temp_dir, "agent_config.json"), "w") as f:
            json.dump(agent_dict, f, indent=2)
        
        # Write the tools configuration to the temporary directory
        with open(os.path.join(temp_dir, "tools_config.json"), "w") as f:
            json.dump(tools_config, f, indent=2)
        
        # Generate the app.py file
        app_py = generate_mcp_app_py(agent_dict, tools_config, mcp_version)
        with open(os.path.join(temp_dir, "app.py"), "w") as f:
            f.write(app_py)
        
        # Generate the requirements.txt file
        requirements_txt = generate_mcp_requirements_txt(mcp_version)
        with open(os.path.join(temp_dir, "requirements.txt"), "w") as f:
            f.write(requirements_txt)
        
        # Generate the Dockerfile
        dockerfile = generate_mcp_dockerfile()
        with open(os.path.join(temp_dir, "Dockerfile"), "w") as f:
            f.write(dockerfile)
        
        # Generate the OpenAPI spec
        openapi_spec = generate_mcp_openapi_spec(agent_dict, tools_config, mcp_version)
        with open(os.path.join(temp_dir, "openapi.json"), "w") as f:
            json.dump(openapi_spec, f, indent=2)
        
        # Create a README.md
        readme = f"""# MCP-Compatible Agent: {agent_dict.get('name', 'Contexa Agent')}

This is an MCP-compatible agent server generated by the Contexa SDK.

## Agent Description

{agent_dict.get('description', 'No description available.')}

## MCP Version

{mcp_version}

## Available Tools

{len(tools_config)} tools available.

## Deployment

This agent can be deployed as a standalone server using the included Dockerfile.

```
docker build -t mcp-agent .
docker run -p 8000:8000 mcp-agent
```

The agent will be available at http://localhost:8000

## API Documentation

The OpenAPI documentation is available at http://localhost:8000/docs
"""
        with open(os.path.join(temp_dir, "README.md"), "w") as f:
            f.write(readme)
        
        # Package the build
        agent_name = agent_dict.get("name", "agent").lower().replace(" ", "_")
        artifact_name = f"{agent_name}_mcp_{mcp_version}_{version}.tar.gz"
        artifact_path = os.path.join(output_dir, artifact_name)
        
        with tarfile.open(artifact_path, "w:gz") as tar:
            for file_name in os.listdir(temp_dir):
                tar.add(
                    os.path.join(temp_dir, file_name),
                    arcname=file_name,
                    recursive=True
                )
        
        print(f"Built MCP-compatible agent server: {artifact_path}")
        return artifact_path


def _build_regular_agent_package(
    agent_dict: Dict[str, Any],
    tools_config: List[Dict[str, Any]],
    output_dir: str = "./build",
    version: str = "0.1.0",
    include_memory: bool = True,
) -> str:
    """Build a regular agent package.
    
    Args:
        agent_dict: Dictionary representation of the agent
        tools_config: List of tool configurations
        output_dir: Directory to output the built agent
        version: Version of the agent
        include_memory: Whether to include memory in the build
        
    Returns:
        Path to the built agent artifact
    """
    # Create a temporary directory for the build
    with tempfile.TemporaryDirectory() as temp_dir:
        # Write the agent configuration to the temporary directory
        with open(os.path.join(temp_dir, "agent_config.json"), "w") as f:
            json.dump(agent_dict, f, indent=2)
        
        # Write the tools configuration to the temporary directory
        with open(os.path.join(temp_dir, "tools_config.json"), "w") as f:
            json.dump(tools_config, f, indent=2)
        
        # Write the memory to the temporary directory if requested
        if include_memory and "memory" in agent_dict:
            with open(os.path.join(temp_dir, "memory.json"), "w") as f:
                json.dump(agent_dict["memory"], f, indent=2)
        
        # Package the build
        agent_name = agent_dict.get("name", "agent").lower().replace(" ", "_")
        artifact_name = f"{agent_name}_{version}.tar.gz"
        artifact_path = os.path.join(output_dir, artifact_name)
        
        with tarfile.open(artifact_path, "w:gz") as tar:
            for file_name in os.listdir(temp_dir):
                tar.add(
                    os.path.join(temp_dir, file_name),
                    arcname=file_name,
                )
        
        print(f"Built agent package: {artifact_path}")
        return artifact_path 